import React, { useState, useEffect } from 'react';
import { MainView } from './views/MainView.js';
import { SplashView } from './views/SplashView.js';
import { DetailView } from './views/DetailView.js';
import { useGun, useGunKeys, useGunKeyAuth } from './utils/hooks.js';
import { instantiateNewGun } from './utils/index.js';
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';

const App = () => {
  const [isReadyToAuth, setReadyToAuth] = useState(
    () => !!JSON.parse(localStorage.getItem('todoKeys')),
  );
  const spawnNewGun = instantiateNewGun(window.Gun, [
    'http://localhost:8765/gun',
  ]);
  const [gun, sea] = useGun(window.Gun, ['http://localhost:8765/gun']);
  const [appKeys, setAppKeys] = useGunKeys(
    sea,
    () => JSON.parse(localStorage.getItem('todoKeys')) || null,
  );
  const [user, isLoggedIn] = useGunKeyAuth(gun, appKeys, isReadyToAuth);
  const initApp = async (keys) => {
    if (keys) {
      // This function is called by the splash view when the user inputs existing
      // keys. In that case, we wanna make sure `appKeys` contains those instead
      // of the ones that were generated by the `useGunKeys` hook.
      setAppKeys(keys);
    }
    // We tell Gun we're ready to perform the authentication, either with existing
    // keys or the ones generated by the `useGunKeys` hook.
    setReadyToAuth(true);
  };

  useEffect(() => {
    if (isLoggedIn) {
      // log the keys so we can grab them, probably should find a better way
      localStorage.setItem('todoKeys', JSON.stringify(appKeys));
      console.log(`App keys: ${JSON.stringify(appKeys)}`);
    }
  }, [isLoggedIn, appKeys]);

  const MainApp = (props) => (
    <div className="app">
      <Router>
        <Switch>
          <Route exact path="/">
            <MainView {...props} />
          </Route>
          <Route key="2" path="/detail/:listID?">
            <DetailView {...props} />
          </Route>
        </Switch>
      </Router>
    </div>
  );

  return (
    <section>
      {isLoggedIn ? (
        <MainApp
          SEA={sea}
          user={user}
          appKeys={appKeys}
          spawnNewGun={spawnNewGun}
        />
      ) : (
        <SplashView initApp={initApp} />
      )}
    </section>
  );
};

export default App;
